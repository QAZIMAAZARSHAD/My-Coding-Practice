Type Conversion - When you assign the value of one data type to another or when you perform an operation on two operands, their data types must be compatible with each other. 
If the data types are not compatible, then the data type of an operand needs to be converted. 
This conversion is of two types: Implicit(Widening), Explicit(Narrowing)

Implicit Type Conversion - When a value of a data type with a smaller range is assigned to a variable of a compatible data type with a larger range. When two variables of 
different data types are involved in an expression, the value of the smaller range data type is converted to a value of the larger range data type and then the operation is 
performed. 

int discountPercentage = 10; 
double newDiscountPercentage = discountPercentage; 

Explicit Type Conversion - Explicit Conversion is used when you want to assign a value of a larger range data type to a smaller range data type.

double totalPrice = 200;  
int newPrice = (int)totalPrice;

short number = 32767; 
	short numberTwo = (short)(number + 1); 
	System.out.println(numberTwo); 

Output - Since 32767+1 is out of range of short, this causes an overflow, and hence the minimum value, i.e., -32768 is considered.



Break - Break statement is used to terminate a loop or the execution of a switch case.

Continue - Continue statement is used to skip the current iteration of a loop and continue with the next iteration. In case of while and do-while loops, continue statement 
skips the remaining code of the loop and passes the control to check the loop condition. Whereas in case of for loop, the control goes to the increment section and then the 
condition is checked.

Object Oriented Programming(OOP) is a type of programming approach which enables the programmers to work with real life entities like Customer, Trainee, Food, Book, etc.
OOP helps a programmer in breaking down the code into smaller modules.
These modules can then be used for representing the individual real life entities known as objects.

Advantages of OOPs -
Modularity: OOP enables programmers to create modules that do not need to be changed when an object is added.
Scalability: OOP makes development and maintenance easier.
Data hiding: OOP provides hiding and securing data.

Class - A representation specifying the characteristics and behaviors of an object is called a class. It is not a real life entity but a template for representing real life 
entities.

An object, which is an instance of a class is a real life entity which has some attributes and behaviors. The class determines the attributes and behaviors which an object 
should possess to belong to the class.

Classes in Java are created using the keyword class followed by a name.

Attributes are the elements or variables which hold the values or state of a particular entity.

Since each instance of a class has different values for its variables, these variables are called instance variables.

Access modifiers help in limiting access to the members of a class. It can be used along with class, attribute and method.

There are multiple access modifiers.
Private - private allows members to be accessible only inside the class
Public - public allows members to be accessible in other classes as well

Methods are the set of instructions which define the behaviors of the entity.

An object is an instance of a class. An object holds data for every instance variable of a class. It allows us to use the instance variables and methods specified in the class.
Any number of objects can be created for a class.

In Java, an object of a class is created using the new keyword.

class Customer {

	public String customerId;
	public String customerName;
	public long contactNumber;
	public String address;

	public void displayCustomerDetails() {
		System.out.println("Displaying customer details \n***************************");
		System.out.println("Customer Id : " + customerId);
		System.out.println("Customer Name : " + customerName);
		System.out.println("Contact Number : " + contactNumber);
		System.out.println("Address : " + address);
		System.out.println();
	}

}

class Tester {

	public static void main(String[] args) {

		// Object creation
		Customer customer = new Customer();

		// Assigning values to the instance variables
		customer.customerId = "C101";
		customer.customerName = "Stephen Abram";
		customer.contactNumber = 7856341287L;
		customer.address = "D089, St. Louis Street, Springfield, 62729";

		// Displaying the customer details
		customer.displayCustomerDetails();
		// Move the above statement immediately after the object creation
		// statement and observe the output

	}

}



The arguments passed while making the method call are known as actual parameters and the arguments present in the method header are known as formal parameters.
 
The variables declared inside a method are known as local variables and the scope of these variables is only within the method, i.e., they cannot be accessed outside the method.
Formal parameters are also local variables. 

Instance variable can be accessed from outside the class with the help of object.

When an object is passed as a parameter, the formal and the actual parameters both refer to the same object and hence the same memory location. Therefore, the changes made 
inside the method to the formal parameters are reflected in the actual parameters also. This kind of parameter passing is known as pass by reference. 

A constructor in Java is a special method that is used to initialize class variables at the time of object creation. 
Each time an object is created using the new() keyword, a constructor is called. A constructor can be created by the programmer. 
If the developer does not create any constructor, then, Java provides a default constructor. 
Constructors have the same name as that of the class and does not have a return type.
A class can have multiple constructors.
A constructor can have an access modifier.
A constructor with no arguments is known as a parameterless constructor.
<access modifier> <name> (<parameters>){
     //body
} 

This Keyword -  When the name of the instance variables of the class and the parameters passed in the constructor are the same, "This" keyword is used to enable the compiler 
to differentiate between the instance variables and the local variables.
this() is used to invoke the constructor of the current class
public class Customer {
	public String customerId;
	public String customerName;
	public long contactNumber;
	public String address;
	public Customer(String customerId, String customerName, long contactNumber, String address){
		this.customerId = customerId;
		this.customerName = customerName;
		this.contactNumber = contactNumber;
		this.address = address;
	}
}

















